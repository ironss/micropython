Functions to implement
======================

* chdir
* getcwd
  LittleFS does not remember current directory. 
  Add a member to mp_obj_littlefs_vfs_t to remember the current directory,
  and append this to the path in every function that takes a path.

* del
  Not sure what this is for, but it is only enabled if FS_REENTRANT is set.


Tests
=====

* Proper verification of all functions
* Measure performance
* Verify behaviour over unexpected restart


IO device driver
================

The concept of a 'block device' does not mesh quite correctly with 
flash storage. In a block device, read and write operations are

In a flash device, the basic operations are read, write and erase.
Each of these operates on a different sized block.
 

VFS API changes
===============

When first mounting a filesystem, there is no good way to tell the system
what type of filesystem it should be. Also, autodetection is not particularly
good. At this stage, it is probably better to allow the caller to pass in the
type of filesystem as a parameter.

os.mount() (or C function vfs_mount()) now accepts an additional optional 
keyword-only parameter fstype. The default value is 'None', in which case
it should try to autodetect, but the implementation just tries to mount
at FAT filesystem.

Otherwise, it should be a filesystem type (VfsLittleFS or VfsFat).


Questions
=========

* When writing, should we check that size actually written was what was requested?

* When open with 'a' append flag, do we need to seek_set or does LFS do that?

* Why does LittleFS assert:

LFS asserts
2473   lfs_file_close      LFS_ASSERT(file->flags & LFS_F_OPENED);
2496   lfs_file_relocate   LFS_ASSERT(file->flags & LFS_F_OPENED);
2579   lfs_file_flush      LFS_ASSERT(file->flags & LFS_F_OPENED);
2660   lfs_file_sync       LFS_ASSERT(file->flags & LFS_F_OPENED);
2728   lfs_file_read       LFS_ASSERT(file->flags & LFS_F_OPENED);
2729   lfs_file_read       LFS_ASSERT((file->flags & 3) != LFS_O_WRONLY);
2808   lfs_file_write      LFS_ASSERT(file->flags & LFS_F_OPENED);
2809   lfs_file_write      LFS_ASSERT((file->flags & 3) != LFS_O_RDONLY);
2939   lfs_file_seek       LFS_ASSERT(file->flags & LFS_F_OPENED);
2973   lfs_file_truncate   LFS_ASSERT(file->flags & LFS_F_OPENED);
2974   lfs_file_truncate   LFS_ASSERT((file->flags & 3) != LFS_O_RDONLY);
3037   lfs_file_tell       LFS_ASSERT(file->flags & LFS_F_OPENED);
3045   lfs_file_rewind     **** NO ASSERT ****
3056   lfs_file_size       LFS_ASSERT(file->flags & LFS_F_OPENED);

I would think that returning an error code EBADF would be more appropriate
